apiVersion: sro.openshift.io/v1beta1
kind: SpecialResource
metadata:
  name: gpu-operator
spec:
  chart:
    name: gpu-operator
    version: v1.10.0
    repository:
      name: gpu-operator
      url: file:///charts/gpu-operator
  namespace: nvidia-gpu-operator
  set:
    kind: Values
    apiVersion: sro.openshift.io/v1beta1
    psp:
      enabled: false

    platform: K8S
    containerRuntime: containerd
    runtimeClass: nvidia
    priorityClassName: system-node-critical
    tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule

    initContainer:
      image: nvcr.io/nvidia/cuda
      tag: 11.4.2-base-ubi8
      imagePullPolicy: IfNotPresent

    validator:
      image: nvcr.io/nvidia/cloud-native/gpu-operator-validator
      # If tag is not specified, then default is to use chart.AppVersion
      tag: "v1.9.0"
      imagePullPolicy: IfNotPresent
      imagePullSecrets: []
      env: []
      args: []
      securityContext:
        privileged: true
        seLinuxOptions:
          level: "s0"
      resources: {}
      driver:
        env:
          - name: COMPONENT
            value: driver
          - name: WITH_WAIT
            value: "true"
      toolkit:
        env:
          - name: COMPONENT
            value: toolkit
          - name: WITH_WAIT
            value: "false"
      cuda:
        env:
          - name: COMPONENT
            value: cuda
          - name: WITH_WAIT
            value: "false"
      plugin:
        env:
          - name: COMPONENT
            value: plugin
          - name: WITH_WAIT
            value: "false"
          - name: WITH_WORKLOAD
            value: "true"

    mig:
      strategy: single

    driver:
      enabled: true
      use_ocp_driver_toolkit: false
      image: nvcr.io/nvidia/driver
      tag: "470.82.01"
      imagePullPolicy: IfNotPresent
      imagePullSecrets: []
      rdma:
        enabled: false
        useHostMofed: false
      env: []
      securityContext:
        privileged: true
        seLinuxOptions:
          level: "s0"
      resources: {}
      # private mirror repository configuration
      repoConfig:
        configMapName: ""
      # custom ssl key/certificate configuration
      certConfig:
        name: ""
      # vGPU licensing configuration
      licensingConfig:
        configMapName: ""
        nlsEnabled: false
      # vGPU topology daemon configuration
      virtualTopology:
        config: ""
      
    driverManager:
      image: nvcr.io/nvidia/cloud-native/k8s-driver-manager
      tag: v0.2.0
      imagePullPolicy: IfNotPresent
      env:
        # always use runc for driver containers
        - name: NVIDIA_VISIBLE_DEVICES
          value: void
        - name: ENABLE_AUTO_DRAIN
          value: "true"
        - name: DRAIN_USE_FORCE
          value: "false"
        - name: DRAIN_POD_SELECTOR_LABEL
          value: ""
        - name: DRAIN_TIMEOUT_SECONDS
          value: "0s"
        - name: DRAIN_DELETE_EMPTYDIR_DATA
          value: "false"

    toolkit:
      enabled: true
      image: nvcr.io/nvidia/k8s/container-toolkit
      tag: 1.7.2-ubuntu18.04
      imagePullPolicy: IfNotPresent
      imagePullSecrets: []
      env: []
      securityContext:
        privileged: true
        seLinuxOptions:
          level: "s0"
      resources: {}

    devicePlugin:
      enabled: true
      image: nvcr.io/nvidia/k8s-device-plugin
      tag: v0.10.0-ubi8
      imagePullPolicy: IfNotPresent
      imagePullSecrets: []
      args: []
      env:
        - name: PASS_DEVICE_SPECS
          value: "true"
        - name: FAIL_ON_INIT_ERROR
          value: "true"
        - name: DEVICE_LIST_STRATEGY
          value: envvar
        - name: DEVICE_ID_STRATEGY
          value: uuid
        - name: NVIDIA_VISIBLE_DEVICES
          value: all
        - name: NVIDIA_DRIVER_CAPABILITIES
          value: all
        - name: NVIDIA_MIG_MONITOR_DEVICES
          value: all
      securityContext:
        privileged: true
      resources: {}

    dcgm:
      enabled: true
      image: nvcr.io/nvidia/cloud-native/dcgm
      tag: 2.3.1-ubuntu20.04
      imagePullPolicy: IfNotPresent
      hostPort: 5555
      args: []
      env: []
      securityContext: {}
      resources: {}

    dcgmExporter:
      enabled: true
      image: nvcr.io/nvidia/k8s/dcgm-exporter
      tag: 2.3.1-2.6.0-ubuntu20.04
      imagePullPolicy: IfNotPresent
      env:
        - name: DCGM_EXPORTER_LISTEN
          value: ":9400"
        - name: DCGM_EXPORTER_KUBERNETES
          value: "true"
        - name: DCGM_EXPORTER_COLLECTORS
          value: "/etc/dcgm-exporter/dcp-metrics-included.csv"
      securityContext: {}
      resources: {}

    gfd:
      enabled: true
      image: nvcr.io/nvidia/gpu-feature-discovery
      tag: v0.4.1
      imagePullPolicy: IfNotPresent
      imagePullSecrets: []
      env:
        - name: GFD_SLEEP_INTERVAL
          value: 60s
        - name: GFD_FAIL_ON_INIT_ERROR
          value: "true"
      podSecurityContext: {}
      securityContext: {}
      resources: {}


    migManager:
      enabled: true
      image: nvcr.io/nvidia/cloud-native/k8s-mig-manager
      tag: v0.2.0-ubuntu20.04
      imagePullPolicy: IfNotPresent
      imagePullSecrets: []
      env:
        - name: WITH_REBOOT
          value: "false"
      securityContext:
        privileged: true
      resources: {}
      config:
        name: default-mig-parted-config
      gpuClientsConfig:
        name: default-gpu-clients

    nodeStatusExporter:
      enabled: true
      image: nvcr.io/nvidia/cloud-native/gpu-operator-validator
      # If tag is not specified, then default is to use chart.AppVersion
      tag: "v1.9.0"
      imagePullPolicy: IfNotPresent
      imagePullSecrets: []
      resources: {}